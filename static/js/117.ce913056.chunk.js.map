{"version":3,"file":"static/js/117.ce913056.chunk.js","mappings":"gKACA,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyK,0B,UCAzK,EAA6B,gCAA7B,EAAoE,0BAApE,EAAuG,4B,SCkBvG,EAbmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKL,EAAMM,OAChB,SAAC,KAAD,CAASH,UAAW,SAAAI,GAAO,OAAIA,EAAQC,SAAWJ,EAAWA,CAAlC,EAA0CK,GAAIR,EAAzE,SAAgFD,EAAMU,SAIjG,ECfD,EAA0B,8BCY1B,EAToB,SAACV,GAEjB,OACI,gBAAKG,UAAWC,EAAhB,SACKJ,EAAMW,SAGlB,E,SCVD,GAAgB,WAAa,iC,oBC2C7B,EAvCmB,SAACX,GAMhB,OACI,gBAAKG,UAAWC,EAAAA,WAAhB,UACI,SAAC,KAAD,CACIQ,cAAe,CACXC,eAAgB,IAEpBC,SAAU,SAACC,EAAD,GAA4B,IAV/BF,EAUcG,EAAgB,EAAhBA,UAVdH,EAWSE,EAAOF,eAV/Bb,EAAMiB,YAAYJ,GAWNK,QAAQC,IAAIJ,EAAOF,gBACnBG,EAAU,CAAED,OAAQ,IACvB,EARL,SAUK,kBACG,UAAC,KAAD,YACI,0BACI,SAAC,KAAD,CACIL,KAAM,iBACNU,KAAM,OACNC,GAAI,WACJC,YAAa,yBAIrB,mBAAQnB,UAAWC,EAAAA,OAAUgB,KAAM,SAAnC,oBAXP,KAmBhB,ECtBD,GAF4BG,EAAAA,EAAAA,KAbN,SAACC,GACnB,MAAO,CACHC,eAAgBD,EAAME,YAAYD,eAEzC,IACwB,SAACE,GACtB,MAAO,CACHV,YAAa,SAACJ,GACVc,GAASC,EAAAA,EAAAA,GAAmBf,GAC/B,EAER,GAE2BU,CAA6CM,GCQzE,EAnBgB,SAAC7B,GAEb,IAAI8B,EAAkB9B,EAAM0B,YAAYK,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAMR,GAAI+B,EAAE/B,GAAII,IAAK2B,EAAE3B,KAA/C,IACrD4B,EAAmBlC,EAAM0B,YAAYS,aAAaH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAazB,QAASyB,EAAEzB,SAA5B,IAE3D,OACI,iBAAKR,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK0B,KAEL,iBAAK3B,UAAWC,EAAhB,WACI,yBAAM8B,KACN,SAAC,EAAD,SAKf,E,oBCTD,IAH4BG,EAAAA,EAAAA,GAAiBC,IAG9BC,EAAAA,EAAAA,KACXhB,EAAAA,EAAAA,KARkB,SAACC,GAAD,MAAY,CAC9BE,YAAaF,EAAME,YADD,IASlBW,EAAAA,EAFJ,CAGEC,G,mJCdEE,EAA6B,SAAChB,GAAD,MAAY,CACzCiB,OAAQjB,EAAMkB,KAAKD,OADU,EAIpBJ,EAAmB,SAACM,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAK7C,MAAMyC,QACT,SAACE,GAAD,UAAeE,KAAK7C,SADI,SAAC,KAAD,CAAUS,GAAI,UAEhD,KALsC,GACXqC,EAAAA,WAShC,OAFqCvB,EAAAA,EAAAA,IAAQiB,EAARjB,CAAoCqB,EAK5E,C","sources":["webpack://my-app/./src/components/dialogs/dialogs.module.css?c5d1","webpack://my-app/./src/components/dialogs/dialog_item/dialog-item.module.css?2b9a","components/dialogs/dialog_item/dialog-item.jsx","webpack://my-app/./src/components/dialogs/message_item/message-item.module.css?026e","components/dialogs/message_item/message_item.jsx","components/dialogs/new_message/new-message.module.css","components/dialogs/new_message/new-message.jsx","components/dialogs/new_message/new-message _container.jsx","components/dialogs/dialogs.jsx","components/dialogs/dialogs_container.jsx","hoc/withAuthRiderect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__d-Bv6\",\"dialogsItems\":\"dialogs_dialogsItems__3ZJ7u\",\"link\":\"dialogs_link__9pU27\",\"active\":\"dialogs_active__ESakf\",\"messages\":\"dialogs_messages__0R49S\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItem\":\"dialog-item_dialogItem__SEJwd\",\"link\":\"dialog-item_link__t8Uid\",\"active\":\"dialog-item_active__t3N4k\"};","\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './dialog-item.module.css';\r\n\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={s.dialogItem}>\r\n            <img src={props.img}></img>\r\n            <NavLink className={navData => navData.isActive ? s.active : s.link} to={path}>{props.name}</NavLink>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"message-item_message__pCciZ\"};","\r\nimport s from './message-item.module.css';\r\n\r\n\r\nconst MessageItem = (props) => {\r\n\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","// extracted by mini-css-extract-plugin\nexport default {\"newMessage\":\"new-message_newMessage__+8yAp\"};","import s from './new-message.module.css';\r\nimport React from 'react';\r\nimport { Formik, Form, Field } from \"formik\";\r\n\r\n\r\nconst NewMessage = (props) => {\r\n\r\n    let sendMessage = (newMessageBody) => {\r\n        props.sendMessage(newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.newMessage} >\r\n            <Formik\r\n                initialValues={{\r\n                    newMessageBody: ''\r\n                }}\r\n                onSubmit={(values, { resetForm }) => {\r\n                    sendMessage(values.newMessageBody)\r\n                    console.log(values.newMessageBody)\r\n                    resetForm({ values: '' });\r\n                }}\r\n            >\r\n                {() => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field\r\n                                name={'newMessageBody'}\r\n                                type={'text'}\r\n                                as={'textarea'}\r\n                                placeholder={'Enter new message'}\r\n                            />\r\n                        </div>\r\n\r\n                        <button className={s.button} type={'submit'}>Send</button>\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default NewMessage;","import { sendMessageCreator } from '../../../redux/dialogsPage_reducer';\r\nimport NewMessage from './new-message';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        newMessageText: state.dialogsPage.newMessageText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nconst NewMessageContainer = connect(mapStateToProps, mapDispatchToProps)(NewMessage);\r\n\r\nexport default NewMessageContainer;","import { Navigate } from 'react-router-dom';\r\nimport s from './dialogs.module.css';\r\nimport DialogItem from './dialog_item/dialog-item';\r\nimport MessageItem from './message_item/message_item';\r\nimport NewMessageContainer from './new_message/new-message _container';\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogsData.map(d => <DialogItem name={d.name} id={d.id} img={d.img} />)\r\n    let messagesElements = props.dialogsPage.messagesData.map(m => <MessageItem message={m.message} />);\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <NewMessageContainer />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Dialogs;","\r\nimport { connect } from 'react-redux';\r\nimport Dialogs from './dialogs';\r\nimport { withAuthRiderect } from '../../hoc/withAuthRiderect'\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    dialogsPage: state.dialogsPage,\r\n})\r\n\r\nlet AuthRedirectComponent = withAuthRiderect(Dialogs)\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    withAuthRiderect\r\n)(Dialogs)","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRiderect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={'/login'} />\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent\r\n\r\n\r\n} "],"names":["props","path","id","className","s","src","img","navData","isActive","to","name","message","initialValues","newMessageBody","onSubmit","values","resetForm","sendMessage","console","log","type","as","placeholder","connect","state","newMessageText","dialogsPage","dispatch","sendMessageCreator","NewMessage","dialogsElements","dialogsData","map","d","messagesElements","messagesData","m","withAuthRiderect","Dialogs","compose","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}