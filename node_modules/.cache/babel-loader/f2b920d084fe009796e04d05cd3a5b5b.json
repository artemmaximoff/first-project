{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_projects\\\\01-first-project\\\\my-app\\\\src\\\\components\\\\login\\\\login.jsx\";\nimport React from 'react';\nimport { Formik, Form, Field, ErrorMessage, setFieldValue } from \"formik\";\nimport s from './login.module.css';\nimport * as Yup from \"yup\";\nimport { login } from '../../redux/auth-reducer';\nimport { connect } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst validateLoginForm = values => {\n  const errors = {};\n\n  if (!values.email) {\n    errors.email = 'Введите почту';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n    errors.email = 'Введите почту';\n  }\n\n  return errors;\n};\n\nconst validationSchemaLoginForm = Yup.object().shape({\n  password: Yup.string().min(5, \"Должно быть более 5 символов\").required(\"Поле обязательно\")\n});\n\nconst LoginForm = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\",\n        rememberMe: false\n      },\n      validate: validateLoginForm,\n      validationSchema: validationSchemaLoginForm,\n      validateOnBlur: true,\n      onSubmit: (values, onSubmitProps) => {\n        console.log(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus);\n        props.login(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus);\n      },\n      children: error => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            className: s.field,\n            name: 'email',\n            type: 'text',\n            placeholder: 'email'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          className: s.error,\n          name: \"email\",\n          component: \"span\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Field, {\n            className: s.field,\n            name: 'password',\n            type: 'password',\n            placeholder: 'password'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          name: \"password\",\n          component: \"span\",\n          className: s.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: error.status ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.error,\n            children: error.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 35\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Field, {\n              type: 'checkbox',\n              name: 'rememberMe',\n              id: \"rememberMe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: 'rememberMe',\n              children: \" remember me \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 35\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [props.captchaUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: props.captchaUrl\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 50\n          }, this), props.captchaUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              name: 'captcha',\n              type: 'text',\n              placeholder: ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: s.button,\n          type: 'submit',\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_c = LoginForm;\n\nconst Login = props => {\n  if (props.isAuth) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: '/profile'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Login;\n\nconst mapStateToProps = state => {\n  return {\n    isAuth: state.auth.isAuth,\n    captchaUrl: state.auth.captchaUrl\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login\n})(Login);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LoginForm\");\n$RefreshReg$(_c2, \"Login\");","map":{"version":3,"sources":["D:/react_projects/01-first-project/my-app/src/components/login/login.jsx"],"names":["React","Formik","Form","Field","ErrorMessage","setFieldValue","s","Yup","login","connect","Navigate","validateLoginForm","values","errors","email","test","validationSchemaLoginForm","object","shape","password","string","min","required","LoginForm","props","rememberMe","onSubmitProps","console","log","captcha","setStatus","error","field","status","captchaUrl","button","Login","isAuth","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field, ErrorMessage, setFieldValue } from \"formik\";\r\nimport s from './login.module.css';\r\nimport * as Yup from \"yup\";\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom'\r\n\r\n\r\nconst validateLoginForm = values => {\r\n    const errors = {};\r\n    if (!values.email) {\r\n        errors.email = 'Введите почту';\r\n\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Введите почту';\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst validationSchemaLoginForm = Yup.object().shape({\r\n\r\n    password: Yup.string()\r\n        .min(5, \"Должно быть более 5 символов\")\r\n        .required(\"Поле обязательно\")\r\n});\r\n\r\n\r\nconst LoginForm = (props) => {\r\n    \r\n\r\n    return (\r\n        <div>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    email: \"\",\r\n                    password: \"\",\r\n                    rememberMe: false\r\n                }}\r\n                validate={validateLoginForm}\r\n                validationSchema={validationSchemaLoginForm}\r\n                validateOnBlur\r\n                onSubmit={(values, onSubmitProps) => {\r\n\r\n                    console.log(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus)\r\n                    props.login(values.email, values.password, values.rememberMe, values.captcha, onSubmitProps.setStatus)\r\n                }}\r\n            >\r\n                {(error) => (\r\n                    <Form>\r\n                        <div>\r\n                            <Field\r\n                                className={s.field}\r\n                                name={'email'}\r\n                                type={'text'}\r\n                                placeholder={'email'} />\r\n                        </div>\r\n                        <ErrorMessage className={s.error} name=\"email\" component=\"span\" />\r\n                        <div>\r\n                            <Field\r\n                                className={s.field}\r\n                                name={'password'}\r\n                                type={'password'}\r\n                                placeholder={'password'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"password\" component=\"span\" className={s.error} />\r\n                        <div>\r\n                            {error.status\r\n                                ? <div className={s.error}>{error.status}</div>\r\n                                : <div>\r\n                                    <Field\r\n                                        type={'checkbox'}\r\n                                        name={'rememberMe'}\r\n                                        id='rememberMe' />\r\n                                    <label htmlFor={'rememberMe'}> remember me </label>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            {props.captchaUrl && <img src={props.captchaUrl}></img>}\r\n                            {props.captchaUrl && <div><Field\r\n                                name={'captcha'}\r\n                                type={'text'}\r\n                                placeholder={''} /></div>}\r\n                        </div>\r\n                        <button className={s.button} type={'submit'} >Login</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst Login = (props) => {\r\n    if (props.isAuth) {\r\n        return <Navigate to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginForm {...props} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { login })(Login);"]},"metadata":{},"sourceType":"module"}