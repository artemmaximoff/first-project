{"ast":null,"code":"var _jsxFileName = \"D:\\\\react_projects\\\\01-first-project\\\\my-app\\\\src\\\\components\\\\profile\\\\profileContiner.jsx\";\nimport React from 'react';\nimport Profile from './profile';\nimport { connect } from 'react-redux';\nimport { getProfile, getStatus, updateStatus, savePhoto, changeInfo } from '../../redux/profilePage_reducer';\nimport { withAuthRiderect } from '../../hoc/withAuthRiderect';\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { compose } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileContainer extends React.Component {\n  refreshProfile() {\n    let userId = this.props.router.params.userId;\n\n    if (!userId) {\n      userId = this.props.autorisedId;\n\n      if (!userId) {\n        this.props.history.push(\"/login\");\n      }\n    }\n\n    this.props.getProfile(userId);\n    this.props.getStatus(userId);\n    /*profileAPI.getProfile(userId).then(data => {\r\n        this.props.setUserProfile(data);\r\n    })*/\n  }\n\n  componentDidMount() {\n    this.refreshProfile();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.router.params.userId != prevProps.router.params.userId) {\n      this.refreshProfile();\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Profile, { ...this.props,\n      isOwner: !this.props.router.params.userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nlet AuthRedirectComponent = withAuthRiderect(ProfileContainer);\n_c = AuthRedirectComponent;\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  isAuth: state.auth.isAuth,\n  autorisedId: state.auth.id\n});\n\nfunction withRouter(AuthRedirectComponent) {\n  var _s = $RefreshSig$();\n\n  function ComponentWithRouterProp(props) {\n    _s();\n\n    let location = useLocation();\n    let navigate = useNavigate();\n    let params = useParams();\n    return /*#__PURE__*/_jsxDEV(AuthRedirectComponent, { ...props,\n      router: {\n        location,\n        navigate,\n        params\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this);\n  }\n\n  _s(ComponentWithRouterProp, \"G4H0N746j5KwtpeOKQjfXhEbWfg=\", false, function () {\n    return [useLocation, useNavigate, useParams];\n  });\n\n  return ComponentWithRouterProp;\n}\n\nexport default compose(connect(mapStateToProps, {\n  getProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  changeInfo\n}), withAuthRiderect, withRouter)(ProfileContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");","map":{"version":3,"sources":["D:/react_projects/01-first-project/my-app/src/components/profile/profileContiner.jsx"],"names":["React","Profile","connect","getProfile","getStatus","updateStatus","savePhoto","changeInfo","withAuthRiderect","useLocation","useNavigate","useParams","compose","ProfileContainer","Component","refreshProfile","userId","props","router","params","autorisedId","history","push","componentDidMount","componentDidUpdate","prevProps","prevState","render","AuthRedirectComponent","mapStateToProps","state","profile","profilePage","status","isAuth","auth","id","withRouter","ComponentWithRouterProp","location","navigate"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,EAA8CC,SAA9C,EAAyDC,UAAzD,QAA2E,iCAA3E;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AACA,SACIC,WADJ,EAEIC,WAFJ,EAGIC,SAHJ,QAIO,kBAJP;AAKA,SAASC,OAAT,QAAwB,OAAxB;;;AAIA,MAAMC,gBAAN,SAA+Bb,KAAK,CAACc,SAArC,CAA+C;AAE3CC,EAAAA,cAAc,GAAG;AACb,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAAyBH,MAAtC;;AACA,QAAI,CAACA,MAAL,EAAa;AACTA,MAAAA,MAAM,GAAG,KAAKC,KAAL,CAAWG,WAApB;;AACA,UAAI,CAACJ,MAAL,EAAa;AACT,aAAKC,KAAL,CAAWI,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ;;AACD,SAAKL,KAAL,CAAWd,UAAX,CAAsBa,MAAtB;AAEA,SAAKC,KAAL,CAAWb,SAAX,CAAqBY,MAArB;AAEA;AACR;AACA;AACK;;AAEDO,EAAAA,iBAAiB,GAAG;AAChB,SAAKR,cAAL;AAEH;;AAEDS,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAI,KAAKT,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAAyBH,MAAzB,IAAmCS,SAAS,CAACP,MAAV,CAAiBC,MAAjB,CAAwBH,MAA/D,EAAuE;AACnE,WAAKD,cAAL;AACH;AACJ;;AAEDY,EAAAA,MAAM,GAAG;AAGL,wBACI,QAAC,OAAD,OAAa,KAAKV,KAAlB;AACI,MAAA,OAAO,EAAE,CAAC,KAAKA,KAAL,CAAWC,MAAX,CAAkBC,MAAlB,CAAyBH;AADvC;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAtC0C;;AAyC/C,IAAIY,qBAAqB,GAAGpB,gBAAgB,CAACK,gBAAD,CAA5C;KAAIe,qB;;AAGJ,IAAIC,eAAe,GAAIC,KAAD,KAAY;AAC9BC,EAAAA,OAAO,EAAED,KAAK,CAACE,WAAN,CAAkBD,OADG;AAE9BE,EAAAA,MAAM,EAAEH,KAAK,CAACE,WAAN,CAAkBC,MAFI;AAG9BC,EAAAA,MAAM,EAAEJ,KAAK,CAACK,IAAN,CAAWD,MAHW;AAI9Bd,EAAAA,WAAW,EAAEU,KAAK,CAACK,IAAN,CAAWC;AAJM,CAAZ,CAAtB;;AASA,SAASC,UAAT,CAAoBT,qBAApB,EAA2C;AAAA;;AACvC,WAASU,uBAAT,CAAiCrB,KAAjC,EAAwC;AAAA;;AACpC,QAAIsB,QAAQ,GAAG9B,WAAW,EAA1B;AACA,QAAI+B,QAAQ,GAAG9B,WAAW,EAA1B;AACA,QAAIS,MAAM,GAAGR,SAAS,EAAtB;AACA,wBACI,QAAC,qBAAD,OACQM,KADR;AAEI,MAAA,MAAM,EAAE;AAAEsB,QAAAA,QAAF;AAAYC,QAAAA,QAAZ;AAAsBrB,QAAAA;AAAtB;AAFZ;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAXsC,KAC9BmB,uBAD8B;AAAA,YAEpB7B,WAFoB,EAGpBC,WAHoB,EAItBC,SAJsB;AAAA;;AAYvC,SAAO2B,uBAAP;AACH;;AAED,eAAe1B,OAAO,CAClBV,OAAO,CAAC2B,eAAD,EAAkB;AAAE1B,EAAAA,UAAF;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA,YAAzB;AAAuCC,EAAAA,SAAvC;AAAkDC,EAAAA;AAAlD,CAAlB,CADW,EAElBC,gBAFkB,EAGlB6B,UAHkB,CAAP,CAKbxB,gBALa,CAAf","sourcesContent":["import React from 'react';\r\nimport Profile from './profile';\r\nimport { connect } from 'react-redux';\r\nimport { getProfile, getStatus, updateStatus, savePhoto, changeInfo } from '../../redux/profilePage_reducer';\r\nimport { withAuthRiderect } from '../../hoc/withAuthRiderect'\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from \"react-router-dom\"\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorisedId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n\r\n        this.props.getStatus(userId)\r\n\r\n        /*profileAPI.getProfile(userId).then(data => {\r\n            this.props.setUserProfile(data);\r\n        })*/\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.router.params.userId}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet AuthRedirectComponent = withAuthRiderect(ProfileContainer);\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    isAuth: state.auth.isAuth,\r\n    autorisedId: state.auth.id,\r\n\r\n\r\n});\r\n\r\nfunction withRouter(AuthRedirectComponent) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <AuthRedirectComponent\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getProfile, getStatus, updateStatus, savePhoto, changeInfo }),\r\n    withAuthRiderect,\r\n    withRouter,\r\n\r\n)(ProfileContainer)"]},"metadata":{},"sourceType":"module"}