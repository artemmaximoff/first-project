{"ast":null,"code":"import { usersAPI } from '../api/api';\nconst FOLLOW = 'FOLLOW';\nconst UNFOLLOW = 'UNFOLLOW';\nconst SET_USERS = 'SET_USERS';\nconst SET_CURRENT_PAGE = 'CURRENT_PAGE';\nconst SET_TOTAL_USER_COUNT = 'TOTAL_USER_COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLWING_PROGRESS = 'TOGGLE_IS_FOLLWING_PROGRES';\nlet initialState = {\n  users: [],\n  totalUsersCount: 0,\n  pageSize: 10,\n  currentPage: 1,\n  isFetching: true,\n  follwingInProgress: []\n};\n\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: true\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case UNFOLLOW:\n      return { ...state,\n        users: state.users.map(u => {\n          if (u.id === action.userId) {\n            return { ...u,\n              followed: false\n            };\n          }\n\n          return u;\n        })\n      };\n\n    case SET_USERS:\n      return { ...state,\n        users: [...action.users]\n      };\n\n    case SET_CURRENT_PAGE:\n      return { ...state,\n        currentPage: action.currentPage\n      };\n\n    case SET_TOTAL_USER_COUNT:\n      return { ...state,\n        totalUsersCount: action.totalUsersCount\n      };\n\n    case TOGGLE_IS_FETCHING:\n      return { ...state,\n        isFetching: action.isFetching\n      };\n\n    case TOGGLE_IS_FOLLWING_PROGRESS:\n      return { ...state,\n        follwingInProgress: action.isFetching ? [...state.follwingInProgress, action.userId] : state.follwingInProgress.filter(id => id != action.userId)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccessed = userId => ({\n  type: FOLLOW,\n  userId\n});\nexport const unfollowSuccessed = userId => ({\n  type: UNFOLLOW,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CURRENT_PAGE,\n  currentPage\n});\nexport const setTotalUsersCount = totalUsersCount => ({\n  type: SET_TOTAL_USER_COUNT,\n  totalUsersCount\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const togglefollwingInProgress = (isFetching, userId) => ({\n  type: TOGGLE_IS_FOLLWING_PROGRESS,\n  isFetching,\n  userId\n});\nexport const getUsers = (currentPage, pageSize) => async dispatch => {\n  dispatch(toggleIsFetching(true));\n  dispatch(setCurrentPage(currentPage));\n  let response = await usersAPI.getUsers(currentPage, pageSize);\n  dispatch(toggleIsFetching(false));\n  dispatch(setUsers(response.data.items));\n  dispatch(setTotalUsersCount(response.data.totalCount));\n};\nexport const follow = userId => async dispatch => {\n  dispatch(togglefollwingInProgress(true, userId));\n  let response = await usersAPI.follow(userId);\n\n  if (response.data.resultCode == 0) {\n    dispatch(followSuccessed(userId));\n  }\n\n  dispatch(togglefollwingInProgress(false, userId));\n};\nexport const unfollow = userId => async dispatch => {\n  dispatch(togglefollwingInProgress(true, userId));\n  let response = await usersAPI.unfollow(userId);\n\n  if (response.data.resultCode == 0) {\n    dispatch(unfollowSuccessed(userId));\n  }\n\n  dispatch(togglefollwingInProgress(false, userId));\n};\nexport default usersReducer;","map":{"version":3,"sources":["D:/react_projects/01-first-project/my-app/src/redux/usersReducer.js"],"names":["usersAPI","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USER_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLWING_PROGRESS","initialState","users","totalUsersCount","pageSize","currentPage","isFetching","follwingInProgress","usersReducer","state","action","type","map","u","id","userId","followed","filter","followSuccessed","unfollowSuccessed","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","togglefollwingInProgress","getUsers","dispatch","response","data","items","totalCount","follow","resultCode","unfollow"],"mappings":"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","sourcesContent":["import { usersAPI } from '../api/api';\r\n\r\nconst FOLLOW = 'FOLLOW'\r\nconst UNFOLLOW = 'UNFOLLOW'\r\nconst SET_USERS = 'SET_USERS'\r\nconst SET_CURRENT_PAGE = 'CURRENT_PAGE'\r\nconst SET_TOTAL_USER_COUNT = 'TOTAL_USER_COUNT'\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nconst TOGGLE_IS_FOLLWING_PROGRESS = 'TOGGLE_IS_FOLLWING_PROGRES'\r\n\r\nlet initialState = {\r\n    users: [],\r\n    totalUsersCount: 0,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    follwingInProgress: []\r\n\r\n};\r\n\r\nconst usersReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalUsersCount\r\n            }\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_IS_FOLLWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                follwingInProgress: action.isFetching ? [...state.follwingInProgress, action.userId] : state.follwingInProgress.filter(id => id != action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const followSuccessed = (userId) => ({ type: FOLLOW, userId });\r\nexport const unfollowSuccessed = (userId) => ({ type: UNFOLLOW, userId });\r\nexport const setUsers = (users) => ({ type: SET_USERS, users });\r\nexport const setCurrentPage = (currentPage) => ({ type: SET_CURRENT_PAGE, currentPage });\r\nexport const setTotalUsersCount = (totalUsersCount) => ({ type: SET_TOTAL_USER_COUNT, totalUsersCount });\r\nexport const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\nexport const togglefollwingInProgress = (isFetching, userId) => ({\r\n    type: TOGGLE_IS_FOLLWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n});\r\nexport const getUsers = (currentPage, pageSize) => async (dispatch) => {\r\n    dispatch(toggleIsFetching(true));\r\n    dispatch(setCurrentPage(currentPage));\r\n    let response = await usersAPI.getUsers(currentPage, pageSize);\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.data.items))\r\n    dispatch(setTotalUsersCount(response.data.totalCount))\r\n}\r\n\r\nexport const follow = (userId) => async (dispatch) => {\r\n    dispatch(togglefollwingInProgress(true, userId));\r\n    let response = await usersAPI.follow(userId);\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(followSuccessed(userId))\r\n    }\r\n    dispatch(togglefollwingInProgress(false, userId))\r\n\r\n}\r\nexport const unfollow = (userId) => async (dispatch) => {\r\n    dispatch(togglefollwingInProgress(true, userId));\r\n    let response = await usersAPI.unfollow(userId);\r\n    if (response.data.resultCode == 0) {\r\n        dispatch(unfollowSuccessed(userId))\r\n    }\r\n    dispatch(togglefollwingInProgress(false, userId))\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}